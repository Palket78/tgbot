### –§–∞–π–ª —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ###

import requests
import sqlite3
import aiosqlite

from aiogram import types, Router, F, Bot
from aiogram.types import Message
from aiogram.filters.command import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from config_file import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env
import keyb as keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏
import texts as txt # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–∞–º–∏
import data_base.req as rq # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω–µ—Å–µ—Å–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
import data_base.que_reply as qr # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏–º –∑–∞—Ç–µ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å–Ω–æ-–æ—Ç–≤–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ë–î
from middlewares import AccessMiddleware, BanUserMiddleware # –ò–º–ø–æ—Ä—Ç MW
from filters import checkAdminFilter, adm # –ò–º–ø–æ—Ä—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
from test import ai_text # –ò–º–ø–æ—Ä—Ç –æ–±—É—á–∞–ª–∫–∏


admin = config.admins
rt = Router() # –û—Ç–¥–µ–ª—è–µ–º —Ñ–∞–π–ª —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
rt.message.middleware(AccessMiddleware()) # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–≥–æ –º–∏–¥–¥–ª–≤—ç–π—Ä–∞ –∫ —Ä–æ—É—Ç–µ—Ä—É
rt.message.middleware(BanUserMiddleware()) # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–Ω-–º–∏–¥–¥–ª–≤—ç–π—Ä–∞ –∫ —Ä–æ—É—Ç–µ—Ä—É

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: –ò–º—è, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
class Register(StatesGroup):
    name = State()
    number = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class dialog(StatesGroup):
    ban = State()
    unban = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–¥(–æ—Ç–∫–ª—é—á–µ–Ω–∞ –æ—Ç —Ä–∞–±–æ—Ç—ã)
#async def get_answer(question):
    #async with aiosqlite.connect('vopros_otvet.db') as qr.conn: # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö 'vopros_otvet.db'
        #async with qr.conn.execute("SELECT answer FROM menu WHERE question=?", (question,)) as cursor:  # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            #result = await cursor.fetchone() # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            #return result[0] if result else None  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@rt.message(CommandStart())
async def cmd_start(message: types.Message):
    con = sqlite3.connect('db.sqlite3') # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite3
    cursor = con.cursor() # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute(f"SELECT tg_id FROM users WHERE tg_id = {message.from_user.id}")  # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ TG_ID
    user_id_massive = cursor.fetchall()
    txt_3 = txt.text_3 # –¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if user_id_massive: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
        await message.reply('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!') 
        await message.answer(txt_3, reply_markup=keyboard.btn_menu_start)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î –∏ –Ω–∞–≤–æ–¥–∏–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!")
        await message.answer('–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ! ',reply_markup=keyboard.btn_reg)
    if message.from_user.id == admin and user_id_massive: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–¥–º–∏–Ω–∞
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!',reply_markup=keyboard.kb_admin)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å" + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
@rt.message(checkAdminFilter(adm), F.text == 'üíº–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å')
async def admin_commands(message: types.Message):
    await message.answer('–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',reply_markup=keyboard.btn_admin)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help –∏ –∫–Ω–æ–ø–∫–∏ F.A.Q.
@rt.message(Command("help"),StateFilter(None))
@rt.message(F.text.contains('F.A.Q'))
async def cmd_help(message: types.Message):
    txt_1 = txt.text_1 # –¢–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é
    await message.answer(txt_1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ask 
@rt.message(Command("ask"), StateFilter(None))
async def cmd_ask(message: types.Message):
    txt_2 = txt.text_2 # –¢–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–æ–º –Ω–∞ –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É
    await message.answer(txt_2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å
@rt.message(Command("profile"),StateFilter(None))
@rt.message(F.text.contains('–ü—Ä–æ—Ñ–∏–ª—å'))
async def send_profile(message: types.Message):
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = message.from_user.full_name # –ü–æ–ª—É—á–∞–µ–º –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\nüîñ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}" # –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç
    await message.reply(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /order_cert –∏–∑ –ë—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
@rt.message(Command("order_cert"),StateFilter(None))
async def send_sert(message: types.Message):
    await message.answer("–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É <a href = 'https://t.me/hr_krasintegra'>HR Krasintegra</a>",parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /write_note –∏–∑ –ë—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
@rt.message(Command("write_note"),StateFilter(None))
async def link_docs(message: types.message):
    await message.answer('–°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–∑—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /hospital –∏–∑ –ë—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
@rt.message(Command("hospital"),StateFilter(None))
async def sick_leave(message: types.Message):
    await message.answer("<a href = 'https://t.me/hr_krasintegra'>HR Krasintegra</a>",parse_mode = 'HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /life_circum –∏–∑ –ë—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
@rt.message(Command('life_circum'),StateFilter(None))
async def send_life(message: types.Message):
    await message.answer('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /my_vac –∏–∑ –ë—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
@rt.message(Command("my_vac"),StateFilter(None))
async def info_vac(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:',reply_markup=keyboard.btn_my_vac)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /my_term –∏–∑ –ë—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
@rt.message(Command("my_term"),StateFilter(None))
async def info_term(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:',reply_markup=keyboard.btn_my_term)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 
@rt.message(F.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def cmd_settings(message: types.Message):
    await message.answer('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!',reply_markup=keyboard.btn_settings) # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@rt.callback_query(F.data == 'regist')
async def send_reg(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Register.name) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è') # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@rt.callback_query(checkAdminFilter(adm),F.data == 'ban_user')
async def black_list(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(dialog.ban) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ ID
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@rt.callback_query(checkAdminFilter(adm), F.data == 'unban_user')
async def unban(callback: types. CallbackQuery, state: FSMContext):
    await state.set_state(dialog.unban) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ ID
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@rt.callback_query(checkAdminFilter(adm), F.data == 'statistic_users')
async def statistic(callback: types. CallbackQuery):
    con4 = sqlite3.connect('db.sqlite3') # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
    cursor4 = con4.cursor() # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä 
    cursor4.execute('''SELECT tg_id, name, number FROM users''') # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –±–∞–∑–µ
    users_tg = cursor4.fetchall() # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    sum_users = len(set(id[0] for id in users_tg)) # –î–µ–ª–∞–µ–º –ø–æ–¥—Å—á–µ—Ç —é–∑–µ—Ä–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É 
    if users_tg: # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
        message = 'üë•–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n'
        for tg_id, name, number in users_tg:
            message += (f"üë§ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {tg_id}\n"
                        f"üìù–§–ò–û –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}\n"
                        f"‚òéÔ∏è–ù–æ–º–µ—Ä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {number}"
                        f"\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n\n")
        message += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {sum_users}"
    else:
        message = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª—é–¥—è—Ö'
    await callback.message.answer(message) 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —é–∑–µ—Ä–∞
@rt.message(dialog.ban) 
async def banan(message: types.Message, state: FSMContext):
    await state.update_data(ban=message.text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 
    data_ban = await state.get_data() # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await message.answer('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    await rq.set_ban(data_ban['ban']) # –ó–∞–Ω–æ—Å–∏–º ID –≤ –ë–î
    con2 = sqlite3.connect('db.sqlite3') # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    cursor2 = con2.cursor() # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor2.execute(f'DELETE FROM allow_users WHERE allow_tg_id = ?', (data_ban['ban'],)) # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    con2.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    await state.clear() # –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–±–∞–Ω–∞ —é–∑–µ—Ä–∞
@rt.message(dialog.unban) 
async def unbanan(message: types.Message, state: FSMContext):
    await state.update_data(unban=message.text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 
    data_unban = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await message.answer('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    con3 = sqlite3.connect('db.sqlite3') # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    cursor3 = con3.cursor() # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor3.execute(f'INSERT INTO allow_users (allow_tg_id) VALUES (?)', (data_unban['unban'],)) # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç
    cursor3.execute(f'DELETE FROM blocked WHERE block_tg_id = ?', (data_unban['unban'],)) # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–ª–µ–∫–ª–∏—Å—Ç–∞
    con3.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    await state.clear() # –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —é–∑–µ—Ä–∞
@rt.message(Register.name, F.text)
async def reg_name(message: types.Message, state: FSMContext):
    if message.text.startswith('/'): # –£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        await message.answer('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
        return
    await state.update_data(name=message.text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(Register.number) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ 
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard.btn_number)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —é–∑–µ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@rt.message(Register.number, F.contact)
async def reg_num(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data() # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–ù–æ–º–µ—Ä: {data["number"]}\n–û–±–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start', reply_markup=keyboard.kb) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await rq.set_user(message.from_user.id, data['name'], data['number']) # –ó–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await state.clear() # –û—á–∏—â–∞–µ–º

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å(–û—Ç–∫–ª—é—á–µ–Ω)
#@rt.message()
#async def handle_query(message: types.Message):
    #answer = await get_answer(message.text)
    #if answer:
        #await message.answer(answer)
    #else:
        #await message.answer('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è LLM
@rt.message(StateFilter(None))
async def message_handler(msg: Message, bot: Bot):
    headers = {
        'Content-Type': 'application/json',
    }

    json_data = {
        'model': 'qwen2.5-7b-instruct-1m',
        'messages': [
            {
                'role': 'system',
                'content': ai_text,
            }, 
            {
                'role': 'user',
                'content': msg.text,
            },
        ],
        'temperature': 0.8,
        'max_tokens': -1,
        'stream': False,
    }

    response = requests.post(config.llm_url, headers=headers, json=json_data)
    data = response.json()
    text = data['choices'][0]['message']['content']

    await bot.send_message(msg.chat.id, text, parse_mode='Markdown')






    

