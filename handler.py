### –§–∞–π–ª —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ###

from aiogram import types
from aiogram.types import Message
from aiogram.filters.command import Command, CommandStart
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sqlite3

import keyb as keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏
import texts as txt # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–∞–º–∏
import data_base.req as rq # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω–µ—Å–µ—Å–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î

rt = Router() # –û—Ç–¥–µ–ª—è–µ–º —Ñ–∞–π–ª —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

# –ö–ª–∞—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: –ò–º—è, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
class Register(StatesGroup):
    name = State()
    number = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@rt.message(CommandStart())
async def cmd_start(message: types.Message):
    con = sqlite3.connect("db.sqlite3") # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite3
    cursor = con.cursor() # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute(f"SELECT tg_id FROM users WHERE tg_id = {message.from_user.id}")  # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ TG_ID
    user_id_massive = cursor.fetchall()
    txt_3 = txt.text_3 # –¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if user_id_massive: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
        await message.reply('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!') 
        await message.answer(txt_3, reply_markup=keyboard.btn_menu_start)
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î –∏ –Ω–∞–≤–æ–¥–∏–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await rq.set_user(message.from_user.id)
        await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!")
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',reply_markup=keyboard.btn_langMenu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help –∏ –∫–Ω–æ–ø–∫–∏ F.A.Q.
@rt.message(Command("help"))
@rt.message(F.text.contains('F.A.Q'))
async def cmd_help(message: types.Message):
    txt_1 = txt.text_1 # –¢–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é
    await message.answer(txt_1)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ask 
@rt.message(Command("ask"))
async def cmd_ask(message: types.Message):
    txt_2 = txt.text_2 # –¢–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–æ–º –Ω–∞ –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É
    await message.answer(txt_2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å
@rt.message(Command("profile"))
@rt.message(F.text.contains('–ü—Ä–æ—Ñ–∏–ª—å'))
async def send_profile(message: types.Message):
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = message.from_user.full_name # –ü–æ–ª—É—á–∞–µ–º –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\nüîñ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}" # –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç
    await message.reply(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 
@rt.message(F.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def cmd_settings(message: types.Message):
    await message.answer('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!',reply_markup=keyboard.btn_settings) # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞
@rt.callback_query(F.data == 'Lang_RU')
@rt.callback_query(F.data == 'Lang_EU')
async def lang(callback: types.CallbackQuery):
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',show_alert = True, reply_markup=keyboard.btn_reg) # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Ä–µ–≥–æ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@rt.callback_query(F.data == 'regist')
async def send_reg(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Register.name) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è') # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —é–∑–µ—Ä–∞
@rt.message(Register.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(Register.number) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ 
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard.btn_number) # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞/–Ω–æ–º–µ—Ä–∞ –æ—Ç —é–∑–µ—Ä–∞
@rt.message(Register.number, F.contact)
async def reg_num(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data() # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–ù–æ–º–µ—Ä: {data["number"]}\n–û–±–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start', reply_markup=keyboard.kb) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await rq.set_name(data['name']) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –ë–î
    await rq.set_number(data['number']) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –ë–î
    await state.clear() # –û—á–∏—â–∞–µ–º






    

